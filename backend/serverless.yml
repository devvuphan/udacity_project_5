org: devvuphan
app: serverless-blog-app
service: serverless-blog-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin

package:
  individually: true

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packagerOptions:
      scripts:
        - rm -rf node_modules/aws-sdk

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    BLOGS_TABLE: Blogs-${self:provider.stage}
    BLOGS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: s3-vupa1-blog-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    INDEX_USER: userId

  logs:
    # Enable API Gateway logs
    restApi: true

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetBlogs:
    handler: src/lambda/http/getBlogs.handler
    events:
      - http:
          method: get
          path: blogs
          cors: true
          authorizer: Auth
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}/index/${self:provider.environment.INDEX_USER}

  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateBlog:
    handler: src/lambda/http/createBlog.handler
    events:
      - http:
          method: post
          path: blogs
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-blog-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}/index/${self:provider.environment.INDEX_USER}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateBlog:
    handler: src/lambda/http/updateBlog.handler
    events:
      - http:
          method: patch
          path: blogs/{blogId}
          authorizer: Auth
          cors: true
          request:
            schemas:
              application/json: ${file(models/update-blog-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}/index/${self:provider.environment.INDEX_USER}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"

  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteBlog:
    handler: src/lambda/http/deleteBlog.handler
    events:
      - http:
          method: delete
          path: blogs/{blogId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}/index/${self:provider.environment.INDEX_USER}

  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: blogs/{blogId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: Allow
        Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
        Resource:
          - "*"
      - Effect: "Allow"
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}/index/${self:provider.environment.INDEX_USER}

resources:
  Resources:
    # Add necessary AWS resources. You will need at least the following AWS resources
    # Feel free to change the names as you like. 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ValidateRequestBody: true
        ValidateRequestParameters: false

    # Create a DynamoDB table with local secondary index and a composite key
    BlogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: blogId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: blogId
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BLOGS_TABLE}
        LocalSecondaryIndexes:
        - IndexName: ${self:provider.environment.BLOGS_CREATED_AT_INDEX}
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
              ProjectionType: ALL # What attributes will be copied to an index
 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD

    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
        Bucket: !Ref AttachmentsBucket
